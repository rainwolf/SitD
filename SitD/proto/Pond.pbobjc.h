// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pond.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class AccountCreated;
@class AccountDetails;
@class Delivery;
@class Download;
@class DownloadReply;
@class Fetch;
@class Fetched;
@class HMACSetup;
@class HMACStrike;
@class Message;
@class Message_Attachment;
@class Message_Detachment;
@class NewAccount;
@class ServerAnnounce;
@class SignedRevocation;
@class SignedRevocation_Revocation;
@class Upload;
@class UploadReply;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Reply_Status

typedef GPB_ENUM(Reply_Status) {
  Reply_Status_Ok = 0,
  Reply_Status_ParseError = 1,
  Reply_Status_NoRequest = 2,
  Reply_Status_InternalError = 3,
  Reply_Status_IdentityAlreadyKnown = 10,
  Reply_Status_Overload = 11,
  Reply_Status_NoSuchAddress = 12,
  Reply_Status_DeliverySignatureInvalid = 13,
  Reply_Status_IncorrectGeneration = 14,
  Reply_Status_MailboxFull = 15,
  Reply_Status_NoAccount = 16,
  Reply_Status_OverQuota = 17,
  Reply_Status_FileLargerThanSize = 18,
  Reply_Status_FileComplete = 19,
  Reply_Status_NoSuchFile = 20,
  Reply_Status_ResumePastEndOfFile = 21,
  Reply_Status_GenerationRevoked = 22,
  Reply_Status_CannotParseRevocation = 23,

  /**
   * REGISTRATION_DISABLED may be returned after a NewAccount
   * request to indicate the the server doesn't accept new
   * registrations.
   **/
  Reply_Status_RegistrationDisabled = 24,

  /**
   * HMAC_KEY_ALREADY_SET is returned in reply to a HMACSetup
   * request if a different HMAC key has already been setup.
   **/
  Reply_Status_HmacKeyAlreadySet = 25,

  /**
   * HMAC_NOT_SETUP results from a delivery attempt when the
   * recipient hasn't configured an HMAC key.
   **/
  Reply_Status_HmacNotSetup = 26,

  /**
   * HMAC_INCORRECT results from a delivery when the HMAC of the
   * one-time public key doesn't validate.
   **/
  Reply_Status_HmacIncorrect = 27,

  /**
   * HMAC_USED results from a delivery when the HMAC value has
   * already been used.
   **/
  Reply_Status_HmacUsed = 28,

  /**
   * HMAC_REVOKED results from a delivery when the HMAC value has
   * been marked as revoked.
   **/
  Reply_Status_HmacRevoked = 29,
};

GPBEnumDescriptor *Reply_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Reply_Status_IsValidValue(int32_t value);

#pragma mark - Enum Message_Encoding

typedef GPB_ENUM(Message_Encoding) {
  Message_Encoding_Raw = 0,
  Message_Encoding_Gzip = 1,
};

GPBEnumDescriptor *Message_Encoding_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Message_Encoding_IsValidValue(int32_t value);

#pragma mark - PondRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface PondRoot : GPBRootObject
@end

#pragma mark - Request

typedef GPB_ENUM(Request_FieldNumber) {
  Request_FieldNumber_NewAccount = 1,
  Request_FieldNumber_Deliver = 2,
  Request_FieldNumber_Fetch = 3,
  Request_FieldNumber_Upload = 4,
  Request_FieldNumber_Download = 5,
  Request_FieldNumber_Revocation = 6,
  Request_FieldNumber_HmacSetup = 7,
  Request_FieldNumber_HmacStrike = 8,
};

/**
 * Request is the client's request to the server. Only one of the optional
 * messages may be present in any Request.
 **/
@interface Request : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NewAccount *newAccount NS_RETURNS_NOT_RETAINED;
/** Test to see if @c newAccount has been set. */
@property(nonatomic, readwrite) BOOL hasNewAccount;

@property(nonatomic, readwrite, strong, null_resettable) Delivery *deliver;
/** Test to see if @c deliver has been set. */
@property(nonatomic, readwrite) BOOL hasDeliver;

@property(nonatomic, readwrite, strong, null_resettable) Fetch *fetch;
/** Test to see if @c fetch has been set. */
@property(nonatomic, readwrite) BOOL hasFetch;

@property(nonatomic, readwrite, strong, null_resettable) Upload *upload;
/** Test to see if @c upload has been set. */
@property(nonatomic, readwrite) BOOL hasUpload;

@property(nonatomic, readwrite, strong, null_resettable) Download *download;
/** Test to see if @c download has been set. */
@property(nonatomic, readwrite) BOOL hasDownload;

@property(nonatomic, readwrite, strong, null_resettable) SignedRevocation *revocation;
/** Test to see if @c revocation has been set. */
@property(nonatomic, readwrite) BOOL hasRevocation;

@property(nonatomic, readwrite, strong, null_resettable) HMACSetup *hmacSetup;
/** Test to see if @c hmacSetup has been set. */
@property(nonatomic, readwrite) BOOL hasHmacSetup;

@property(nonatomic, readwrite, strong, null_resettable) HMACStrike *hmacStrike;
/** Test to see if @c hmacStrike has been set. */
@property(nonatomic, readwrite) BOOL hasHmacStrike;

@end

#pragma mark - Reply

typedef GPB_ENUM(Reply_FieldNumber) {
  Reply_FieldNumber_Status = 1,
  Reply_FieldNumber_AccountCreated = 2,
  Reply_FieldNumber_Fetched = 3,
  Reply_FieldNumber_Announce = 4,
  Reply_FieldNumber_Upload = 5,
  Reply_FieldNumber_Download = 6,
  Reply_FieldNumber_Revocation = 7,
  Reply_FieldNumber_ExtraRevocationsArray = 8,
};

/**
 * Reply is the server's reply to the client.
 **/
@interface Reply : GPBMessage

@property(nonatomic, readwrite) Reply_Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@property(nonatomic, readwrite, strong, null_resettable) AccountCreated *accountCreated;
/** Test to see if @c accountCreated has been set. */
@property(nonatomic, readwrite) BOOL hasAccountCreated;

@property(nonatomic, readwrite, strong, null_resettable) Fetched *fetched;
/** Test to see if @c fetched has been set. */
@property(nonatomic, readwrite) BOOL hasFetched;

@property(nonatomic, readwrite, strong, null_resettable) ServerAnnounce *announce;
/** Test to see if @c announce has been set. */
@property(nonatomic, readwrite) BOOL hasAnnounce;

@property(nonatomic, readwrite, strong, null_resettable) UploadReply *upload;
/** Test to see if @c upload has been set. */
@property(nonatomic, readwrite) BOOL hasUpload;

@property(nonatomic, readwrite, strong, null_resettable) DownloadReply *download;
/** Test to see if @c download has been set. */
@property(nonatomic, readwrite) BOOL hasDownload;

@property(nonatomic, readwrite, strong, null_resettable) SignedRevocation *revocation;
/** Test to see if @c revocation has been set. */
@property(nonatomic, readwrite) BOOL hasRevocation;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SignedRevocation*> *extraRevocationsArray;
/** The number of items in @c extraRevocationsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger extraRevocationsArray_Count;

@end

#pragma mark - NewAccount

typedef GPB_ENUM(NewAccount_FieldNumber) {
  NewAccount_FieldNumber_Generation = 1,
  NewAccount_FieldNumber_Group = 2,
  NewAccount_FieldNumber_HmacKey = 3,
};

/**
 * NewAccount is a request that the client may send to the server to request a
 * new account. The public identity of the connecting client will be the `name'
 * of the new account.
 **/
@interface NewAccount : GPBMessage

/**
 * generation contains the revocation generation for the account. The
 * client should pick it at random in order to hide the number of
 * revocations that the client has performed.
 **/
@property(nonatomic, readwrite) uint32_t generation;

@property(nonatomic, readwrite) BOOL hasGeneration;
/**
 * group contains the serialised bbssig.Group for authenticating
 * deliveries to this account.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *group;
/** Test to see if @c group has been set. */
@property(nonatomic, readwrite) BOOL hasGroup;

/**
 * hmac_key contains an HMAC key used to authenticate delivery
 * attempts.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *hmacKey;
/** Test to see if @c hmacKey has been set. */
@property(nonatomic, readwrite) BOOL hasHmacKey;

@end

#pragma mark - AccountDetails

typedef GPB_ENUM(AccountDetails_FieldNumber) {
  AccountDetails_FieldNumber_Queue = 1,
  AccountDetails_FieldNumber_MaxQueue = 2,
};

/**
 * AccountDetails contains the state of an account.
 **/
@interface AccountDetails : GPBMessage

/** queue is the number of messages waiting at the server. */
@property(nonatomic, readwrite) uint32_t queue;

@property(nonatomic, readwrite) BOOL hasQueue;
/**
 * max_queue is the maximum number of messages that the server will
 * queue for this account.
 **/
@property(nonatomic, readwrite) uint32_t maxQueue;

@property(nonatomic, readwrite) BOOL hasMaxQueue;
@end

#pragma mark - AccountCreated

typedef GPB_ENUM(AccountCreated_FieldNumber) {
  AccountCreated_FieldNumber_Details = 1,
};

/**
 * AccountCreated is the reply to a NewAccount request.
 **/
@interface AccountCreated : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) AccountDetails *details;
/** Test to see if @c details has been set. */
@property(nonatomic, readwrite) BOOL hasDetails;

@end

#pragma mark - Delivery

typedef GPB_ENUM(Delivery_FieldNumber) {
  Delivery_FieldNumber_To = 1,
  Delivery_FieldNumber_GroupSignature = 2,
  Delivery_FieldNumber_Generation = 3,
  Delivery_FieldNumber_Message = 4,
  Delivery_FieldNumber_OneTimePublicKey = 5,
  Delivery_FieldNumber_HmacOfPublicKey = 6,
  Delivery_FieldNumber_OneTimeSignature = 7,
};

/**
 * Delivery is a request from a client to deliver a message to an account on
 * this server. There's no explicit reply protobuf for this request. Success is
 * indicated via |status|.
 **/
@interface Delivery : GPBMessage

/** The 32-byte, public identity of the target account. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *to;
/** Test to see if @c to has been set. */
@property(nonatomic, readwrite) BOOL hasTo;

/**
 * A group signature of |message| proving authorisation to deliver
 * messages to the account.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *groupSignature;
/** Test to see if @c groupSignature has been set. */
@property(nonatomic, readwrite) BOOL hasGroupSignature;

/**
 * The current generation number in order for the server to send
 * revocation updates.
 **/
@property(nonatomic, readwrite) uint32_t generation;

@property(nonatomic, readwrite) BOOL hasGeneration;
/** The padded message to deliver. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;

/**
 * one_time_public_key contains an Ed25519 public key that was issued
 * by the recipient in order to authenticate delivery attempts.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *oneTimePublicKey;
/** Test to see if @c oneTimePublicKey has been set. */
@property(nonatomic, readwrite) BOOL hasOneTimePublicKey;

/**
 * hmac_of_public_key contains a 63-bit HMAC of public key using the
 * HMAC key known to server and recipient.
 **/
@property(nonatomic, readwrite) uint64_t hmacOfPublicKey;

@property(nonatomic, readwrite) BOOL hasHmacOfPublicKey;
/** one_time_signature contains a signature, by public_key, of message. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *oneTimeSignature;
/** Test to see if @c oneTimeSignature has been set. */
@property(nonatomic, readwrite) BOOL hasOneTimeSignature;

@end

#pragma mark - Fetch

/**
 * Fetch is a request to fetch a message. It may result in either a Fetched, or
 * ServerAnnounce message. (Or none at all if no messages are pending.)
 **/
@interface Fetch : GPBMessage

@end

#pragma mark - Fetched

typedef GPB_ENUM(Fetched_FieldNumber) {
  Fetched_FieldNumber_GroupSignature = 1,
  Fetched_FieldNumber_Generation = 2,
  Fetched_FieldNumber_Message = 3,
  Fetched_FieldNumber_Details = 4,
};

/**
 * Fetched is the reply to a Fetch request if the server has a message for
 * delivery.
 **/
@interface Fetched : GPBMessage

/** group_signature is the group signature presented by the sender. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *groupSignature;
/** Test to see if @c groupSignature has been set. */
@property(nonatomic, readwrite) BOOL hasGroupSignature;

/** generation is the generation number used for delivery. */
@property(nonatomic, readwrite) uint32_t generation;

@property(nonatomic, readwrite) BOOL hasGeneration;
@property(nonatomic, readwrite, copy, null_resettable) NSData *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;

@property(nonatomic, readwrite, strong, null_resettable) AccountDetails *details;
/** Test to see if @c details has been set. */
@property(nonatomic, readwrite) BOOL hasDetails;

@end

#pragma mark - ServerAnnounce

typedef GPB_ENUM(ServerAnnounce_FieldNumber) {
  ServerAnnounce_FieldNumber_Message = 1,
};

/**
 * ServerAnnounce is a special type of reply to a Fetch request. The message
 * comes from the server, rather than from another client and it's intended to
 * be used for announcements from the server operator to all or some users.
 **/
@interface ServerAnnounce : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Message *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;

@end

#pragma mark - Upload

typedef GPB_ENUM(Upload_FieldNumber) {
  Upload_FieldNumber_Id_p = 1,
  Upload_FieldNumber_Size = 2,
};

@interface Upload : GPBMessage

@property(nonatomic, readwrite) uint64_t id_p;

@property(nonatomic, readwrite) BOOL hasId_p;
@property(nonatomic, readwrite) int64_t size;

@property(nonatomic, readwrite) BOOL hasSize;
@end

#pragma mark - UploadReply

typedef GPB_ENUM(UploadReply_FieldNumber) {
  UploadReply_FieldNumber_Resume = 1,
};

@interface UploadReply : GPBMessage

@property(nonatomic, readwrite) int64_t resume;

@property(nonatomic, readwrite) BOOL hasResume;
@end

#pragma mark - Download

typedef GPB_ENUM(Download_FieldNumber) {
  Download_FieldNumber_From = 1,
  Download_FieldNumber_Id_p = 2,
  Download_FieldNumber_Resume = 3,
};

@interface Download : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *from;
/** Test to see if @c from has been set. */
@property(nonatomic, readwrite) BOOL hasFrom;

@property(nonatomic, readwrite) uint64_t id_p;

@property(nonatomic, readwrite) BOOL hasId_p;
@property(nonatomic, readwrite) int64_t resume;

@property(nonatomic, readwrite) BOOL hasResume;
@end

#pragma mark - DownloadReply

typedef GPB_ENUM(DownloadReply_FieldNumber) {
  DownloadReply_FieldNumber_Size = 1,
};

@interface DownloadReply : GPBMessage

@property(nonatomic, readwrite) int64_t size;

@property(nonatomic, readwrite) BOOL hasSize;
@end

#pragma mark - SignedRevocation

typedef GPB_ENUM(SignedRevocation_FieldNumber) {
  SignedRevocation_FieldNumber_Revocation = 1,
  SignedRevocation_FieldNumber_Signature = 2,
};

/**
 * SignedRevocation is a request for the server to store an update to the group
 * public key that revokes some sender. The server will reply with a revocation
 * for generation x when a delivery to that generation is requested.
 **/
@interface SignedRevocation : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) SignedRevocation_Revocation *revocation;
/** Test to see if @c revocation has been set. */
@property(nonatomic, readwrite) BOOL hasRevocation;

@property(nonatomic, readwrite, copy, null_resettable) NSData *signature;
/** Test to see if @c signature has been set. */
@property(nonatomic, readwrite) BOOL hasSignature;

@end

#pragma mark - SignedRevocation_Revocation

typedef GPB_ENUM(SignedRevocation_Revocation_FieldNumber) {
  SignedRevocation_Revocation_FieldNumber_Generation = 1,
  SignedRevocation_Revocation_FieldNumber_Revocation = 2,
};

@interface SignedRevocation_Revocation : GPBMessage

@property(nonatomic, readwrite) uint32_t generation;

@property(nonatomic, readwrite) BOOL hasGeneration;
@property(nonatomic, readwrite, copy, null_resettable) NSData *revocation;
/** Test to see if @c revocation has been set. */
@property(nonatomic, readwrite) BOOL hasRevocation;

@end

#pragma mark - HMACSetup

typedef GPB_ENUM(HMACSetup_FieldNumber) {
  HMACSetup_FieldNumber_HmacKey = 1,
};

/**
 * HMACSetup can be sent by a client to establish an HMAC key if it didn't do
 * so at account creation time.
 **/
@interface HMACSetup : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *hmacKey;
/** Test to see if @c hmacKey has been set. */
@property(nonatomic, readwrite) BOOL hasHmacKey;

@end

#pragma mark - HMACStrike

typedef GPB_ENUM(HMACStrike_FieldNumber) {
  HMACStrike_FieldNumber_HmacsArray = 1,
};

/**
 * HMACStrike is used by a client to record a number of HMAC values as used.
 **/
@interface HMACStrike : GPBMessage

/**
 * hmacs contains a number of 63-bit HMACs. The MSB is used to signal
 * whether the HMAC should be considered used (0) or revoked (1).
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *hmacsArray;
/** The number of items in @c hmacsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger hmacsArray_Count;

@end

#pragma mark - KeyExchange

typedef GPB_ENUM(KeyExchange_FieldNumber) {
  KeyExchange_FieldNumber_PublicKey = 1,
  KeyExchange_FieldNumber_IdentityPublic = 2,
  KeyExchange_FieldNumber_Server = 3,
  KeyExchange_FieldNumber_Dh = 4,
  KeyExchange_FieldNumber_Group = 5,
  KeyExchange_FieldNumber_GroupKey = 6,
  KeyExchange_FieldNumber_Generation = 7,
  KeyExchange_FieldNumber_Dh1 = 8,
};

/**
 * KeyExchange is a message sent between clients to establish a relation. It's
 * always found inside a SignedKeyExchange.
 **/
@interface KeyExchange : GPBMessage

/** Ed25519 public key. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *publicKey;
/** Test to see if @c publicKey has been set. */
@property(nonatomic, readwrite) BOOL hasPublicKey;

/**
 * Curve25519 public key. (Used to tell the server which account to
 * deliver a message to.)
 * Note: in the most up-to-date revision of the Pond ratchet, this
 * should be equal to |public_key|, modulo isomorphism.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *identityPublic;
/** Test to see if @c identityPublic has been set. */
@property(nonatomic, readwrite) BOOL hasIdentityPublic;

/** The URL of this user's home server. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *server;
/** Test to see if @c server has been set. */
@property(nonatomic, readwrite) BOOL hasServer;

/** A Curve25519, initial Diffie-Hellman value. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *dh;
/** Test to see if @c dh has been set. */
@property(nonatomic, readwrite) BOOL hasDh;

/**
 * dh1 contains the second, curve25519, public key if the new-form
 * ratchet is being used.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *dh1;
/** Test to see if @c dh1 has been set. */
@property(nonatomic, readwrite) BOOL hasDh1;

/** A serialised bbssig.Group. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *group;
/** Test to see if @c group has been set. */
@property(nonatomic, readwrite) BOOL hasGroup;

/** A bbssig.PrivateKey to authorise message delivery. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *groupKey;
/** Test to see if @c groupKey has been set. */
@property(nonatomic, readwrite) BOOL hasGroupKey;

/** The generation number of |group|. */
@property(nonatomic, readwrite) uint32_t generation;

@property(nonatomic, readwrite) BOOL hasGeneration;
@end

#pragma mark - SignedKeyExchange

typedef GPB_ENUM(SignedKeyExchange_FieldNumber) {
  SignedKeyExchange_FieldNumber_Signed_p = 1,
  SignedKeyExchange_FieldNumber_Signature = 2,
};

/**
 * A SignedKeyExchange is a message that's sent between clients and exposed in
 * the UI. It's typically found in a PEM block with type "POND KEY EXCHANGE".
 **/
@interface SignedKeyExchange : GPBMessage

/** signed contains a serialised KeyExchange message. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *signed_p;
/** Test to see if @c signed_p has been set. */
@property(nonatomic, readwrite) BOOL hasSigned_p;

/**
 * signature contains an Ed25519 signature of |signed| by
 * |signed.public_key|.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *signature;
/** Test to see if @c signature has been set. */
@property(nonatomic, readwrite) BOOL hasSignature;

@end

#pragma mark - Message

typedef GPB_ENUM(Message_FieldNumber) {
  Message_FieldNumber_Id_p = 1,
  Message_FieldNumber_Time = 2,
  Message_FieldNumber_Body = 3,
  Message_FieldNumber_BodyEncoding = 4,
  Message_FieldNumber_MyNextDh = 5,
  Message_FieldNumber_InReplyTo = 6,
  Message_FieldNumber_FilesArray = 7,
  Message_FieldNumber_DetachedFilesArray = 8,
  Message_FieldNumber_SupportedVersion = 9,
  Message_FieldNumber_AlsoAckArray = 10,
};

/**
 * Message is typically contained within a NaCl box that's passed between
 * clients using Delivery and Fetch.
 **/
@interface Message : GPBMessage

/**
 * id is generated by the sender in order for the receiver to associate
 * replies.
 **/
@property(nonatomic, readwrite) uint64_t id_p;

@property(nonatomic, readwrite) BOOL hasId_p;
/** time is the creation time of the message in epoch nanoseconds. */
@property(nonatomic, readwrite) int64_t time;

@property(nonatomic, readwrite) BOOL hasTime;
/** body, after decoding, is a utf8 message. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *body;
/** Test to see if @c body has been set. */
@property(nonatomic, readwrite) BOOL hasBody;

@property(nonatomic, readwrite) Message_Encoding bodyEncoding;

@property(nonatomic, readwrite) BOOL hasBodyEncoding;
/** my_next_dh contains a Curve25519 public value for future messages. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *myNextDh;
/** Test to see if @c myNextDh has been set. */
@property(nonatomic, readwrite) BOOL hasMyNextDh;

/**
 * in_reply_to, if set, contains the |id| value of a previous message
 * sent by the recipient.
 **/
@property(nonatomic, readwrite) uint64_t inReplyTo;

@property(nonatomic, readwrite) BOOL hasInReplyTo;
/**
 * also_ack contains message ids for other messages that are also
 * acknowledged by this message.
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *alsoAckArray;
/** The number of items in @c alsoAckArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger alsoAckArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Message_Attachment*> *filesArray;
/** The number of items in @c filesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger filesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Message_Detachment*> *detachedFilesArray;
/** The number of items in @c detachedFilesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger detachedFilesArray_Count;

/**
 * supported_version allows a client to advertise the maximum supported
 * version that it speaks.
 **/
@property(nonatomic, readwrite) int32_t supportedVersion;

@property(nonatomic, readwrite) BOOL hasSupportedVersion;
@end

#pragma mark - Message_Attachment

typedef GPB_ENUM(Message_Attachment_FieldNumber) {
  Message_Attachment_FieldNumber_Filename = 1,
  Message_Attachment_FieldNumber_Contents = 2,
};

@interface Message_Attachment : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *filename;
/** Test to see if @c filename has been set. */
@property(nonatomic, readwrite) BOOL hasFilename;

@property(nonatomic, readwrite, copy, null_resettable) NSData *contents;
/** Test to see if @c contents has been set. */
@property(nonatomic, readwrite) BOOL hasContents;

@end

#pragma mark - Message_Detachment

typedef GPB_ENUM(Message_Detachment_FieldNumber) {
  Message_Detachment_FieldNumber_Filename = 1,
  Message_Detachment_FieldNumber_Size = 2,
  Message_Detachment_FieldNumber_PaddedSize = 3,
  Message_Detachment_FieldNumber_ChunkSize = 4,
  Message_Detachment_FieldNumber_Key = 5,
  Message_Detachment_FieldNumber_URL = 6,
};

@interface Message_Detachment : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *filename;
/** Test to see if @c filename has been set. */
@property(nonatomic, readwrite) BOOL hasFilename;

@property(nonatomic, readwrite) uint64_t size;

@property(nonatomic, readwrite) BOOL hasSize;
@property(nonatomic, readwrite) uint64_t paddedSize;

@property(nonatomic, readwrite) BOOL hasPaddedSize;
@property(nonatomic, readwrite) uint32_t chunkSize;

@property(nonatomic, readwrite) BOOL hasChunkSize;
@property(nonatomic, readwrite, copy, null_resettable) NSData *key;
/** Test to see if @c key has been set. */
@property(nonatomic, readwrite) BOOL hasKey;

@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;
/** Test to see if @c URL has been set. */
@property(nonatomic, readwrite) BOOL hasURL;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
